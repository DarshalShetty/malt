(module+ test
  (require rackunit)

  (define test-list
    (list 0 1 2 3 4 5))

  (define test-cartesian-list
    (list
      (list 500 1000 2000 4000)
      (list 4 8 16 32)
      (list 0.0001 0.0002 0.0004 0.0008)))

  (check-equal? (cartesian-product test-cartesian-list)
    '((500 4 0.0001)   (500 4 0.0002)   (500 4 0.0004)   (500 4 0.0008)
      (500 8 0.0001)   (500 8 0.0002)   (500 8 0.0004)   (500 8 0.0008)
      (500 16 0.0001)  (500 16 0.0002)  (500 16 0.0004)  (500 16 0.0008)
      (500 32 0.0001)  (500 32 0.0002)  (500 32 0.0004)  (500 32 0.0008)
      (1000 4 0.0001)  (1000 4 0.0002)  (1000 4 0.0004)  (1000 4 0.0008)
      (1000 8 0.0001)  (1000 8 0.0002)  (1000 8 0.0004)  (1000 8 0.0008)
      (1000 16 0.0001) (1000 16 0.0002) (1000 16 0.0004) (1000 16 0.0008)
      (1000 32 0.0001) (1000 32 0.0002) (1000 32 0.0004) (1000 32 0.0008)
      (2000 4 0.0001)  (2000 4 0.0002)  (2000 4 0.0004)  (2000 4 0.0008)
      (2000 8 0.0001)  (2000 8 0.0002)  (2000 8 0.0004)  (2000 8 0.0008)
      (2000 16 0.0001) (2000 16 0.0002) (2000 16 0.0004) (2000 16 0.0008)
      (2000 32 0.0001) (2000 32 0.0002) (2000 32 0.0004) (2000 32 0.0008)
      (4000 4 0.0001)  (4000 4 0.0002)  (4000 4 0.0004)  (4000 4 0.0008)
      (4000 8 0.0001)  (4000 8 0.0002)  (4000 8 0.0004)  (4000 8 0.0008)
      (4000 16 0.0001) (4000 16 0.0002) (4000 16 0.0004) (4000 16 0.0008)
      (4000 32 0.0001) (4000 32 0.0002) (4000 32 0.0004) (4000 32 0.0008)))

  (check-equal? (one-product '(a b c d) '(() () ()))
                '((a) (a) (a) (b) (b) (b) (c) (c) (c) (d) (d) (d)))

  (check-equal? (one-product '(a b c) '((1) (2) (3) (4)))
                '((a 1) (a 2) (a 3) (a 4)
                  (b 1) (b 2) (b 3) (b 4)
                  (c 1) (c 2) (c 3) (c 4)))

  (declare-hyper a)
  (declare-hyper b)
  (declare-hyper c)

  (check-equal? (hyper-bindings (a b c) '(1 2 3) (+ a b c))
                6)

  (let ((test-result (make-parameter '())))
    (grid-search (Î» (theta)
                   (test-result (cons theta (test-result)))
                   #f)
                 ((a 1 2 3 4)
                  (b 7 8 9)
                  (c 'd 'e 'f))
        (list a b c))
    (check-equal? (test-result) '((4 9 f) (4 9 e) (4 9 d)
                                  (4 8 f) (4 8 e) (4 8 d)
                                  (4 7 f) (4 7 e) (4 7 d)

                                  (3 9 f) (3 9 e) (3 9 d)
                                  (3 8 f) (3 8 e) (3 8 d)
                                  (3 7 f) (3 7 e) (3 7 d)

                                  (2 9 f) (2 9 e) (2 9 d)
                                  (2 8 f) (2 8 e) (2 8 d)
                                  (2 7 f) (2 7 e) (2 7 d)

                                  (1 9 f) (1 9 e) (1 9 d)
                                  (1 8 f) (1 8 e) (1 8 d)
                                  (1 7 f) (1 7 e) (1 7 d))))

  (with-hyper ((a 3))
    (check-equal? a 3)
    (check-equal? b 'unset-hyper-b))

  (with-hypers ((a 3)
               (c 7))
    (check-equal? (+ a c) 10)
    (check-equal? b 'unset-hyper-b)))
